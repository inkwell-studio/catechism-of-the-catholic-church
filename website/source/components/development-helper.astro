---
import { DEFAULT_LANGUAGE, Language } from '@catechism/source/types/types';

import PartialLink from '@components/partial-link.astro';
import { getTableOfContentsSync } from '@logic/artifacts';
import { path } from '@logic/navigation-utils';
import { ElementID } from '@logic/ui';
import { BasicPath } from '../pages/_routes';

interface Props {
    language: Language;
    usePartialLinks: boolean;
}

const { language, usePartialLinks } = Astro.props;

const textElementClasses = 'opacity-80 text-center p-4';
const linkClasses = `${textElementClasses} block rounded hover:bg-white/10`;

const homeUrl = DEFAULT_LANGUAGE === language ? '/' : `/${language}`;

const basicPathLinks = [
    ['AP Const.', BasicPath.APOSTOLIC_CONSTITUTION],
    ['AP Letter', BasicPath.APOSTOLIC_LETTER],
    ['Glossary', BasicPath.GLOSSARY],
    ['Index | C', BasicPath.INDEX_CITATIONS],
    ['Index | T', BasicPath.INDEX_TOPICS],
].map(([label, segment]) => {
    // prettier-ignore
    const clientUrl = DEFAULT_LANGUAGE === language
        ? path(segment)
        : path('/', language, segment);

    const contentUrl = path('/partials', clientUrl);

    return {
        label,
        clientUrl,
        contentUrl,
    };
});

const tableOfContents = getTableOfContentsSync(language);
const tocEntries = [tableOfContents.prologue, ...tableOfContents.parts].map((entry) => {
    // prettier-ignore
    const clientUrl = DEFAULT_LANGUAGE === language
        ? path(entry.url)
        : path('/', language, entry.url);

    const contentUrl = path('/partials', clientUrl);

    return {
        clientUrl,
        contentUrl,
        label: entry.title,
    };
});
---

<div class="fixed bottom-4 left-4 w-fit">
    <div
        class="opacity-20 hover:opacity-100 flex flex-col gap-2 p-3 rounded border-4 border-black/20 dark:border-white/20 transition-opacity delay-100 hover:delay-0"
    >
        <div class="flex flex-col align-stretch gap-4">
            <a href={homeUrl} class={linkClasses}>Home</a>

            <div class="h-px border-t border-dashed border-white/40"></div>
            {
                tocEntries.map((entry) =>
                    usePartialLinks ? (
                        <PartialLink
                            target={ElementID.CONTENT_WRAPPER_SELECTOR}
                            clientUrl={entry.clientUrl}
                            contentUrl={entry.contentUrl}
                            class={linkClasses}
                        >
                            {entry.label}
                        </PartialLink>
                    ) : (
                        <a href={entry.clientUrl} class={linkClasses}>
                            {entry.label}
                        </a>
                    ),
                )
            }
            <div class="h-px border-t border-dashed border-white/40"></div>
            {
                basicPathLinks.map((entry) =>
                    usePartialLinks ? (
                        <PartialLink
                            target={ElementID.CONTENT_WRAPPER_SELECTOR}
                            clientUrl={entry.clientUrl}
                            contentUrl={entry.contentUrl}
                            class={linkClasses}
                        >
                            {entry.label}
                        </PartialLink>
                    ) : (
                        <a href={entry.clientUrl} class={linkClasses}>
                            {entry.label}
                        </a>
                    ),
                )
            }

            <div class="h-px border-t border-dashed border-white/40"></div>

            {/* Theme info */}
            <div class={textElementClasses}>
                <span class="hidden dark:inline">Dark</span>
                <span class="dark:hidden">Light</span>
            </div>
        </div>
    </div>
</div>
