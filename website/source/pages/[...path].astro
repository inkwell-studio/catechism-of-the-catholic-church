---
import { DEFAULT_LANGUAGE } from '@catechism-types';

import ApostolicConstitution from '@components/apostolic-constitution/apostolic-constitution.astro';
import ApostolicLetter from '@components/apostolic-letter/apostolic-letter.astro';
import CatechismContent from '@components/catechism-content/catechism-content.astro';
import Glossary from '@components/glossary.astro';
import IndexCitations from '@components/index-citations.astro';
import IndexTopics from '@components/index-topics.astro';

import ContentLayout from '@layouts/content-layout.astro';

import { getAllParagraphNumbers, getParagraphPathIdMap, getSemanticPathPathIdMap } from '@logic/artifacts';
import { getLanguageTag, getParagraphNumber, removeLanguageTag } from '@logic/routing';
import {
    BasicPath,
    basicPaths,
    ContentRoute,
    getBasicRoutes,
    getParagraphNumberRoutes,
    getTableOfContentsRoutes,
} from '@pages/_routes';

export async function getStaticPaths(): Promise<Array<ContentRoute>> {
    return [
        ...getBasicRoutes(),
        ...(await getParagraphNumberRoutes()),
        ...(await getTableOfContentsRoutes()),
    ];
}

const language = getLanguageTag(Astro.params.path) ?? DEFAULT_LANGUAGE;
const path = removeLanguageTag(Astro.params.path, language);

const isGlossary = BasicPath.GLOSSARY === path;
const isIndexTopics = BasicPath.INDEX_TOPICS === path;
const isIndexCitations = BasicPath.INDEX_CITATIONS === path;
const isApostolicLetter = BasicPath.APOSTOLIC_LETTER === path;
const isApostolicConstitution = BasicPath.APOSTOLIC_CONSTITUTION === path;

let pathID = null;

const isPotentialContentPath = path && !basicPaths.includes(path as BasicPath);
if (isPotentialContentPath) {
    const semanticPathMap = await getSemanticPathPathIdMap(language);
    pathID = semanticPathMap[path] ?? null;

    if (!pathID) {
        const paragraphNumber = getParagraphNumber(path);
        if (paragraphNumber) {
            const paragraphNumbers = await getAllParagraphNumbers(language);
            if (paragraphNumbers.includes(paragraphNumber)) {
                const paragraphMap = await getParagraphPathIdMap(language);
                pathID = paragraphMap[paragraphNumber] ?? null;
            }
        }
    }
}

const isCatechismContent = !!pathID;
---

<ContentLayout {language}>
    {isGlossary && <Glossary {language} />}

    {isIndexTopics && <IndexTopics {language} />}

    {isIndexCitations && <IndexCitations {language} />}

    {isApostolicLetter && <ApostolicLetter {language} />}

    {isApostolicConstitution && <ApostolicConstitution {language} />}

    {isCatechismContent && <CatechismContent {pathID} {language} />}
</ContentLayout>
