---
import Icon from '@components/icon.astro';
import PrefetchOnMouseover from '@components/prefetch-on-mouseover.astro';

import Auxiliary from './section/auxiliary.astro';
import MainContent from './section/main-content.astro';
import Panel from './section/panel.astro';

import { DEFAULT_LANGUAGE, Language } from '@catechism-types';

import { IconEnum } from '@components/icon-enum';
import { getTableOfContents } from '@logic/artifacts';
import { translate as t } from '@logic/translation';
import { ElementClass, ElementID, TableOfContentsSection } from '@logic/ui';

interface Props {
    language: Language;
}

const { language } = Astro.props;

// deno-fmt-ignore
const homeUrl = DEFAULT_LANGUAGE === language
    ? '/'
    : `/${language}`

const tabs = [
    [TableOfContentsSection.PROLOGUE, t('Prologue', language)],
    [TableOfContentsSection.PART_1, 'I'],
    [TableOfContentsSection.PART_2, 'II'],
    [TableOfContentsSection.PART_3, 'III'],
    [TableOfContentsSection.PART_4, 'IV'],
    [TableOfContentsSection.AUXILIARY, t('Resources', language)],
];

const tableOfContents = await getTableOfContents(language);
---
<script>
    import '@shoelace/tab/tab.js';
    import '@shoelace/tab-group/tab-group.js';
</script>

<style>
    @reference '@css/base.css';

    :root {
        --toc-navbar-background-color: var(--color-gray-100);
        --toc-navbar-indicator-color: var(--color-sky-600);
        --toc-navbar-border-color: var(--color-gray-200);
        --toc-navbar-tab-text-color: var(--color-gray-600);
        --toc-navbar-tab-text-active-color: var(--color-sky-600);
        --toc-panel-background-color: var(--color-white);
    }

    /* This `dark` class must match the value of the `DARK_MODE_CLASS_TAILWIND` constant in `source/logic/theme.ts` */
    :root.dark {
        --toc-navbar-background-color: var(--color-zinc-925);
        --toc-navbar-indicator-color: var(--color-arctic-600);
        --toc-navbar-border-color: var(--color-zinc-750);
        --toc-navbar-tab-text-color: var(--color-zinc-400);
        --toc-navbar-tab-text-active-color: var(--color-arctic-400);
        --toc-panel-background-color: var(--color-zinc-875);
    }

    sl-tab-group {
        --track-color: var(--toc-navbar-background-color);
        --indicator-color: var(--toc-navbar-indicator-color);
        --track-width: 0.25rem;
    }

    sl-tab-group::part(body) {
        /*
            height of other elements:

            - top bar: 3rem
            - tabs container: 3.25rem (content) + 1px (border)
            - toolbar: `--toolbar-height` variable
            - toolbar border: 1px (this value is subtracted so that the border is covered)
        */
        --cumulative-height-of-other-elements: calc(3rem + 3.25rem + 1px + var(--toolbar-height) - 1px);
        height: calc(100vh - var(--cumulative-height-of-other-elements));
    }

    sl-tab-group::part(nav) {
        @apply flex;
        @apply justify-center;
        @apply bg-(--toc-navbar-background-color);
        @apply border-t;
        @apply border-t-(--toc-navbar-border-color);
    }

    /* The `.disable-animations` class here must match the value of `source/logic/ui.ts::ElementClass.DISABLE_ANIMATIONS_FLAG` */
    sl-tab-group.disable-animations::part(active-tab-indicator) {
        transition: none;
    }

    sl-tab::part(base) {
        @apply flex;
        @apply justify-center;
        @apply min-w-12;
        @apply h-12;
        @apply p-2;
        @apply my-0;
        @apply mx-1;
        @apply rounded-none;
        @apply text-(--toc-navbar-tab-text-color);
    }

    sl-tab[active]::part(base) {
        @apply text-(--toc-navbar-tab-text-active-color);
    }
</style>

<nav class="fixed top-0 bottom-toolbar-height inset-x-0 flex flex-col font-normal bg-white dark:bg-(--toc-panel-background-color)">
    <div class="bg-sky-700 text-sky-100 text-sm dark:bg-arctic-800 dark:text-arctic-200">
        <div
            class="[--button-padding:--spacing(3)] max-w-reading-with-padding mx-auto px-[calc(var(--spacing-text)-var(--button-padding))]"
        >
            <PrefetchOnMouseover url={homeUrl}>
                <a href={homeUrl} class="max-w-max w-max min-h-12 flex items-center gap-2 px-[var(--button-padding)]">
                    <Icon icon={IconEnum.HOME} class="size-5" />
                    <span class="relative top-0.5">{t('Home', language)}</span>
                </a>
            </PrefetchOnMouseover>
        </div>
    </div>

    <sl-tab-group id={ElementID.TABLE_OF_CONTENTS_TAB_GROUP} placement="bottom" class={ElementClass.DISABLE_ANIMATIONS_FLAG}>
        {/* tabs */}
        {tabs.map(([section, label]) => <sl-tab slot="nav" panel={section}>{label}</sl-tab>)}

        {/* panels */}
        <Panel section={TableOfContentsSection.PROLOGUE}>
            <MainContent content={tableOfContents.prologue} {language} />
        </Panel>

        {
            [
                TableOfContentsSection.PART_1,
                TableOfContentsSection.PART_2,
                TableOfContentsSection.PART_3,
                TableOfContentsSection.PART_4,
            ].map((section, i) => (
                <Panel {section}>
                    <MainContent content={tableOfContents.parts[i]} {language} />
                </Panel>
            ))
        }

        <Panel section={TableOfContentsSection.AUXILIARY}>
            <Auxiliary {language} />
        </Panel>
    </sl-tab-group>
</nav>
