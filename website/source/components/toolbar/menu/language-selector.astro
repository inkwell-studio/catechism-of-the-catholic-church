---
import Icon from '@components/icon.astro';
import PrefetchOnMouseover from '@components/prefetch-on-mouseover.astro';
import { IconEnum } from '@components/icon-enum';

import { DEFAULT_LANGUAGE, Language } from '@catechism-types';
import { getLanguages, getNativeLanguageText } from '@catechism-utils/language';

import { getPathIdLanguageUrlMap, getSemanticPathPathIdMap } from '@logic/artifacts';
import { getParagraphNumber, isAuxiliaryRoute, joinPaths, removeLanguageTag, translateAuxiliaryPath } from '@logic/routing';

interface Props {
    currentLanguage: Language;
}

const { currentLanguage } = Astro.props;

const semanticPathPathIdMap = await getSemanticPathPathIdMap(currentLanguage);
const pathIdLanguageUrlMap = await getPathIdLanguageUrlMap();

const path = removeLanguageTag(Astro.params.path, currentLanguage);

const pathID = semanticPathPathIdMap[path] ?? null;
const paragraphNumber = getParagraphNumber(path);
const languageUrlMap = pathID ? pathIdLanguageUrlMap[pathID] : [];

const languagesAndUrls = getLanguages()
    .map(([_languageKey, language]) => {
        let segment = '';

        if (!path) {
            segment = '';
        } else if (isAuxiliaryRoute(path, currentLanguage)) {
            segment = translateAuxiliaryPath(path, currentLanguage, language);
        } else if (paragraphNumber) {
            segment = paragraphNumber + '';
        } else {
            if (!segment) {
                segment = languageUrlMap[language];

                if (!segment) {
                    throw new Error(
                        `A language-switching URL could not be determined (path: ${path}, pathID: ${pathID}, language: ${language})`,
                    );
                }
            }
        }

        // deno-fmt-ignore
        const languagePrefix = DEFAULT_LANGUAGE === language
            ? ''
            : language;

        // deno-fmt-ignore
        const url = !languagePrefix && !segment
            ? '/'
            : joinPaths('/', languagePrefix, segment);

        return { language, url };
    });
---

<ul
    class="max-h-[calc(100vh_-_10rem)] flex flex-col bg-white text-stone-800 p-2 border border-gray-300 space-y-2 overflow-y-auto rounded dark:bg-zinc-800 dark:text-zinc-300 dark:border-zinc-500"
>
    {
        languagesAndUrls.map(({ language, url }) => (
            <li>
                {
                    language === currentLanguage &&
                (
                        <span
                            class="flex justify-center items-center gap-2 min-h-12 bg-gray-50 text-stone-500 rounded cursor-default dark:bg-zinc-750 dark:text-zinc-400"
                        >
                            <span class="relative">
                                {/* deno-fmt-ignore */}
                                {getNativeLanguageText(language)}
                                <Icon icon={IconEnum.CHECK} class="absolute bottom-1 -left-6 size-4" />
                            </span>
                        </span>
                    )
                }
                {
                    language !== currentLanguage &&
                (
                        <PrefetchOnMouseover {url}>
                            <a
                                href={url}
                                class="flex justify-center items-center min-h-12 rounded hover:bg-gray-100 active:bg-gray-200 active:text-stone-900 dark:hover:bg-zinc-700 dark:active:bg-zinc-600 dark:active:text-zinc-200"
                            >
                                {getNativeLanguageText(language)}
                            </a>
                        </PrefetchOnMouseover>
                    )
                }
            </li>
        ))
    }
</ul>
