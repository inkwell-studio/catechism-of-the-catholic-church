---
import { Language } from '@catechism-types';

import CustomElementsDefiner from '@components/custom-elements-definer.astro';
import Toolbar from '@components/toolbar/toolbar.astro';

import { CATECHISM_OF_THE_CATHOLIC_CHURCH } from '@logic/constants';
import { isHomePage } from '@logic/routing';
import { translate as t } from '@logic/translation';

import '@shoelace-themes/light.css';
import '@css/base.css';
import '@css/components.css';
import '@css/shoelace-override.css';

interface Props {
    language: Language;
}
const { language } = Astro.props;

const secondsPerWeek = 604800;
Astro.response.headers.set('Cache-Control', `max-age=${secondsPerWeek}`);

const canonicalUrl = new URL(Astro.url.pathname, Astro.site).href;

const homePage = isHomePage(Astro.url.pathname, language);
---

<html lang={language}>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#1F293B" />
        <meta name="color-scheme" content="light dark" />

        <title>{t(CATECHISM_OF_THE_CATHOLIC_CHURCH, language)}</title>
        <meta
            name="description"
            content={`A web app of the ${CATECHISM_OF_THE_CATHOLIC_CHURCH}, an official doctrinal reference of the Catholic Church, first published in 1992.`}
        />

        <link rel="canonical" href={canonicalUrl} />
        <link rel="sitemap" href="/sitemap-index.xml" />

        {
            /* The favicon files were generated with [RealFaviconGenerator](https://realfavicongenerator.net/) [v0.16](https://realfavicongenerator.net/change_log#v0.16) */
        }
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#adcff4" />
        <meta name="theme-color" content="#ffffff" />

        <script is:inline>
            {/* This `pagefind` variable is used by `source/components/toolbar/search/search.astro.ts` */}
            let pagefind;
            const pagefindImport = import('/pagefind/pagefind.js');
            pagefindImport.then((pf) => {
                pagefind = pf;
                pagefind.init();
            });

            (() => {
                handleTheme();
                handleUiToggles();

                function handleTheme() {
                    {
                        /* This must be executed to prevent a flash of the inaccurate theme being applied.
                        It must be included inline within the <head> element to function properly.
                        The logic and constant values here must be kept in sync with those of `source/logic/theme.ts`. */
                    }
                    const theme = globalThis.localStorage.getItem('theme');
                    if (
                        'DARK' === theme ||
                        ('SYSTEM' === theme && globalThis.matchMedia('(prefers-color-scheme: dark)').matches)
                    ) {
                        document.documentElement.classList.add('dark');
                    }
                }

                function handleUiToggles() {
                    {/* The logic and constant values here must be kept in sync with those of `source/components/toolbar/menu/toggle-cross-references.astro` and `source/css/base.css` */}
                    if ('true' === globalThis.localStorage.getItem('hide-cross-references')) {
                        document.documentElement.classList.add('hide-cross-references');
                    }

                    {/* The logic and constant values here must be kept in sync with those of `source/components/toolbar/menu/toggle-external-references.astro` and `source/css/base.css` */}
                    if ('true' === globalThis.localStorage.getItem('hide-external-references')) {
                        document.documentElement.classList.add('hide-external-references');
                    }
                }
            })();
        </script>
        <script>
            import { shoelaceInitialized } from '@logic/custom-elements';
            import {
                preventInfiniteBackwardScrollBug,
                respondToFirstPageLoad,
                watchForHtmxEvents,
            } from '@logic/navigation-utils';
            import {
                updateReadingAreaIntersectionObservers,
                watchForReadingAreaLastContentChanges,
            } from '@logic/state/reading-area';
            import { watchForThemeChanges } from '@logic/state/theme';

            watchForThemeChanges();

            await shoelaceInitialized();

            updateReadingAreaIntersectionObservers();
            respondToFirstPageLoad();
            watchForHtmxEvents();
            watchForReadingAreaLastContentChanges();
            preventInfiniteBackwardScrollBug();
        </script>
        <script src="/htmx.min.js" is:inline></script>
    </head>

    <body class="bg-stone-50 font-serif font-light text-lg/6 text-stone-950 dark:bg-zinc-900 dark:text-stone-300">
        {/* Child elements are inserted here */}
        <slot />

        {
            !homePage &&
                    (
                <div class="flex justify-center fixed bottom-0 inset-x-0 z-20">
                    <Toolbar {language} />
                </div>
            )
        }

        <CustomElementsDefiner />
    </body>
</html>
