---
import { Content, Language } from '@catechism-types';
import { getRomanNumeral } from '@catechism-utils/title';

import BlockLink from './block-link.astro';
import ParagraphNumbers from './paragraph-numbers.astro';

import { getTableOfContents } from '@logic/artifacts';
import { translate as t } from '@logic/translation';

interface Props {
    language: Language;
    class?: string;
}

/*
    `...rest` is needed in order for the classes from the parent to be properly scoped for the styling specified within by parent
    (see https://docs.astro.build/en/guides/styling/#passing-a-class-to-a-child-component)
*/
const { language, class: classes, ...rest } = Astro.props;

const tableOfContents = await getTableOfContents(language);
---

<ul class={classes} {...rest}>
    {
        [tableOfContents.prologue, ...tableOfContents.parts].map((entry) => {
            const { firstParagraphNumber, lastParagraphNumber } = entry;

            return (
            <li>
                <BlockLink url={entry.url} {language}>
                    <Fragment slot="title">
                        {entry.titleData.title}
                        {Content.PROLOGUE === entry.contentType && <ParagraphNumbers {firstParagraphNumber} {lastParagraphNumber} />}
                    </Fragment>
                    {
                        Content.PART === entry.contentType && (
                            <Fragment slot="subtitle">
                                {t('Part', language)}{' '}{getRomanNumeral(entry.titleData.contentNumber)}
                                <ParagraphNumbers {firstParagraphNumber} {lastParagraphNumber} />
                            </Fragment>
                        )
                    }
                </BlockLink>
            </li>
        );
        })
    }
</ul>
