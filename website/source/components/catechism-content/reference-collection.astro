---
import { Language, ReferenceCollection as ReferenceCollectionType } from '@catechism-types';

import Reference from './reference.astro';

interface Props {
    referenceCollection: ReferenceCollectionType | null;
    language: Language;
}

const { referenceCollection, language } = Astro.props;
---

<script>
    import { defineElement } from '@logic/custom-elements';
    import { hide, onClick, toggle } from '@logic/dom-utils';

    class ReferenceCollection extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            const closeButton = this.querySelector('.closeButton');
            const toggleButton = this.querySelector('.toggleButton');
            const expandedView = this.querySelector('.expandedView');

            onClick(closeButton, () => hide(expandedView));
            onClick(toggleButton, () => toggle(expandedView));
        }
    }

    defineElement('reference-collection', ReferenceCollection);
</script>

<reference-collection>
    <span class="relative">
        <button type="button" class="toggleButton px-0.5">
            <sup>{referenceCollection.referenceNumber}</sup>
        </button>

        <div class="expandedView absolute hidden z-10 bottom-6 -left-8 w-max bg-slate-800 py-1 px-2 rounded-sm">
            {
                referenceCollection.references.map((reference, i, allRefs) => {
                    const divider = i > 0 && i < allRefs.length ? '| ' : '';
                    return (
                    <>
                        {divider} <Reference {reference} {language} />
                    </>
                );
                })
            }

            <button type="button" class="closeButton">
                <sup>X</sup>
            </button>
        </div>
    </span>
</reference-collection>
