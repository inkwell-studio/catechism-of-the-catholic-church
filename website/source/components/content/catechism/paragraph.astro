---
import { Language, Paragraph as ParagraphType } from '@catechism-types';
import { getAllChildContent, isBlockQuote, isParagraphSubitemContainer, isTextBlock, isTextHeading } from '@catechism-utils/content';

import { getUrlFragment } from '@logic/routing';

import UnknownContent from './unknown-content.astro';
import ParagraphNumber from './paragraph-number.astro';
import ParagraphSubitemContainer from './paragraph-subitem-container.astro';
import TextBlock from './text-block.astro';
import TextHeading from './text-heading.astro';
import BlockQuote from './block-quote.astro';

interface Props {
    paragraph: ParagraphType;
    language: Language;
}

const { paragraph, language } = Astro.props;

const id = getUrlFragment(paragraph.semanticPath, false, language).fragment;
const childContent = getAllChildContent(paragraph);

const firstChildIsTextBlock = isTextBlock(childContent[0]);
---

<div {id} class="text-justify mb-4">
    {!firstChildIsTextBlock && <ParagraphNumber paragraphNumber={paragraph.paragraphNumber} />}

    {
        childContent.map((c, index) => {
            if (isParagraphSubitemContainer(c)) {
                return (
            <ParagraphSubitemContainer paragraphSubitemContainer={c} {language} />
        );
            } else if (isTextHeading(c)) {
                return (
            <TextHeading textHeading={c} />
        );
            } else if (isTextBlock(c)) {
                return (
            <TextBlock textBlock={c} {language} paragraphNumber={index === 0 ? paragraph.paragraphNumber : undefined} />
        );
            } else if (isBlockQuote(c)) {
                return (
            <BlockQuote blockQuote={c} {language} />
        );
            }

            return <UnknownContent content={c} />;
        })
    }
</div>
