---
import { Language, PathID } from '@catechism-types';

import ContentBase from './content-base.astro';
import InfiniteScrollTrigger from './infinite-scroll-trigger.astro';
import IntersectionUrlUpdater from './intersection-url-updater.astro';

import { getRenderableNodeMap } from '@logic/artifacts';
import { loadContent } from '@logic/rendering';
import { ElementClass } from '@logic/ui';

interface Props {
    pathID: PathID;
    language: Language;
    firstContent: boolean;
}

const { pathID, language, firstContent } = Astro.props;

const content = await loadContent(language, pathID);

const nodeMap = await getRenderableNodeMap(language);
const renderableNodes = nodeMap[pathID] ?? null;
const thisUrl = renderableNodes?.here.url;
const nextUrl = renderableNodes?.next?.url;
const previousUrl = renderableNodes?.previous?.url;
---

{
    /* TODO:
        - Finalize heights and vertical paddings
    */
}
<div class:list={[ElementClass.CATECHISM_CONTENT_BLOCK, 'relative pl-8 pr-16 border-bottom-4 border-bottom-white']}>
    <div class="max-w-prose mx-auto break-words">
        {content && <ContentBase {content} {language} />}
    </div>

    {nextUrl && <InfiniteScrollTrigger url={nextUrl} {language} class="absolute bottom-[min(100%,_80vh)] invisible" />}

    {
        /* Keeping these each over 100vh from each other ensures that intersection updaters from multiple
           `CATECHISM_CONTENT_BLOCK`s won't be simultaneously visible (assuming that each content block is at least 100vh tall).
        */
    }
    {
        !firstContent && previousUrl && (
            <IntersectionUrlUpdater url={previousUrl} {language} class="invisible absolute -top-[min(100%,_32vh)]" />
        )
    }
    {!firstContent && <IntersectionUrlUpdater url={thisUrl} {language} class="invisible absolute top-[min(100%,_70vh)]" />}
</div>
